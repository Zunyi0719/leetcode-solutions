// solution 1: backtracking, for re-constrcut the tree structure in-place, reverse the visit order
// of pre-order traverse and each time do the operation
// solution 2: iteration, similar as morris traverse

// solution 1
class Solution {
    TreeNode pre = null;
    public void flatten(TreeNode root) {
        if(root!=null){
            flatten(root.right);
            flatten(root.left);
            traverse(root);
        }        
    }
    public void traverse(TreeNode node){
        node.right = pre;
        node.left = null;
        pre = node;
    }
}

// solution 2
class Solution {
    TreeNode pre = null;
    public void flatten(TreeNode root) {
        while(root!=null){
            if(root.left==null) root = root.right;
            else{
                TreeNode tmp = root.left;
                TreeNode lmr = leftmostright(tmp);
                lmr.right = root.right;
                root.right = root.left;
                root.left = null;
                root = root.right;
            }
        }
    }
    public TreeNode leftmostright(TreeNode tmp){
        while(tmp.left!=null || tmp.right!=null){
            if(tmp.right!=null) tmp = tmp.right;
            else tmp=tmp.left;
        }
        return tmp;
    }
}
