// solution 1: A straight forward solution, apply two queues to iterate the tree by level
// in each level while reaching the end, store that node's val into list
// return the list after all nodes are iterated
** solution 1 can be modified to use one queue instead of two, by applying detection of the size of the list, so that we can know
    if it's the first time we reach the current level **

// solution 2: DFS, use dfs plus a count to target the current level of the tree, the list add the val of the node when it's the first time reaching a new level

// solution 1
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList();
        if(root == null) return res;
        Queue<TreeNode> q1 = new LinkedList();
        Queue<TreeNode> q2 = new LinkedList();
        
        q1.add(root);
        
        while(!q1.isEmpty()){
            TreeNode tmp = q1.remove();
            if(tmp.left!=null) q2.add(tmp.left);
            if(tmp.right!=null) q2.add(tmp.right);
            if(q1.isEmpty()){
                res.add(tmp.val);
                q1 = q2;
                q2 = new LinkedList();
            }
        }
     
        return res;
    }
}

// solution 2
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList();
        
        dfs(res,root,1);
     
        return res;
    }
    
    public void dfs(List<Integer> res,TreeNode root,int lvl){
        if(root!=null){
            if(lvl>res.size()){
                res.add(root.val);
            }
            dfs(res,root.right,lvl+1);
            dfs(res,root.left,lvl+1);
        }
    }
}
